# Terminal Coder - Docker Compose Configuration
# Modern containerized development and production environments

version: '3.8'

services:
  # Main Terminal Coder application
  terminal-coder:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    image: terminalcoder/terminal-coder:latest
    container_name: terminal-coder-app
    restart: unless-stopped
    environment:
      - TERMINAL_CODER_ENV=production
      - TERMINAL_CODER_LOG_LEVEL=INFO
    volumes:
      - terminal_coder_data:/home/tcoder/.terminal_coder
      - terminal_coder_workspace:/home/tcoder/workspace
    networks:
      - terminal-coder-network
    command: ["terminal-coder", "--tui"]

  # Development environment
  terminal-coder-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    image: terminalcoder/terminal-coder:dev
    container_name: terminal-coder-dev
    profiles:
      - dev
    environment:
      - TERMINAL_CODER_ENV=development
      - TERMINAL_CODER_LOG_LEVEL=DEBUG
      - PYTHONDONTWRITEBYTECODE=1
    volumes:
      - .:/app
      - terminal_coder_dev_data:/home/tcoder/.terminal_coder
      - /var/run/docker.sock:/var/run/docker.sock  # For Docker-in-Docker
    networks:
      - terminal-coder-network
    ports:
      - "8000:8000"  # For development server
    stdin_open: true
    tty: true
    command: ["bash"]

  # Redis for caching and session management
  redis:
    image: redis:7.2-alpine
    container_name: terminal-coder-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - terminal-coder-network
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-terminalcoder2024}
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL for project and session data
  postgres:
    image: postgres:16-alpine
    container_name: terminal-coder-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-terminal_coder}
      POSTGRES_USER: ${POSTGRES_USER:-tcoder}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-terminalcoder2024}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - terminal-coder-network
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-tcoder} -d ${POSTGRES_DB:-terminal_coder}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy for production
  nginx:
    image: nginx:1.25-alpine
    container_name: terminal-coder-nginx
    profiles:
      - prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - terminal-coder-network
    depends_on:
      - terminal-coder
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: terminal-coder-prometheus
    profiles:
      - monitoring
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - terminal-coder-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'

  # Grafana for visualization
  grafana:
    image: grafana/grafana:10.2.2
    container_name: terminal-coder-grafana
    profiles:
      - monitoring
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - terminal-coder-network
    depends_on:
      - prometheus

  # Log aggregation with Loki
  loki:
    image: grafana/loki:2.9.2
    container_name: terminal-coder-loki
    profiles:
      - logging
    restart: unless-stopped
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    networks:
      - terminal-coder-network
    command: -config.file=/etc/loki/local-config.yaml

  # Log shipping with Promtail
  promtail:
    image: grafana/promtail:2.9.2
    container_name: terminal-coder-promtail
    profiles:
      - logging
    restart: unless-stopped
    volumes:
      - ./monitoring/promtail.yml:/etc/promtail/config.yml:ro
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    networks:
      - terminal-coder-network
    depends_on:
      - loki
    command: -config.file=/etc/promtail/config.yml

networks:
  terminal-coder-network:
    driver: bridge
    name: terminal-coder-network

volumes:
  terminal_coder_data:
    driver: local
    name: terminal_coder_data
  terminal_coder_dev_data:
    driver: local
    name: terminal_coder_dev_data
  terminal_coder_workspace:
    driver: local
    name: terminal_coder_workspace
  redis_data:
    driver: local
    name: terminal_coder_redis_data
  postgres_data:
    driver: local
    name: terminal_coder_postgres_data
  nginx_logs:
    driver: local
    name: terminal_coder_nginx_logs
  prometheus_data:
    driver: local
    name: terminal_coder_prometheus_data
  grafana_data:
    driver: local
    name: terminal_coder_grafana_data
  loki_data:
    driver: local
    name: terminal_coder_loki_data